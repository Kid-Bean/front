Index: .idea/deploymentTargetDropDown.xml
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
deleted file mode 100644
--- a/.idea/deploymentTargetDropDown.xml	(revision dfbf016eb3b618f988b70fbca19882a2fa100475)
+++ /dev/null	(revision dfbf016eb3b618f988b70fbca19882a2fa100475)
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="deploymentTargetDropDown">
-    <targetSelectedWithDropDown>
-      <Target>
-        <type value="QUICK_BOOT_TARGET" />
-        <deviceKey>
-          <Key>
-            <type value="VIRTUAL_DEVICE_PATH" />
-            <value value="C:\Users\lee\.android\avd\Pixel_4_API_34.avd" />
-          </Key>
-        </deviceKey>
-      </Target>
-    </targetSelectedWithDropDown>
-    <timeTargetWasSelectedWithDropDown value="2024-04-08T15:41:46.678360300Z" />
-  </component>
-</project>
\ No newline at end of file
Index: app/src/main/java/soongsil/kidbean/front/quiz/image/dto/request/ImageQuizUploadRequest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package soongsil.kidbean.front.quiz.image.dto.request\r\n\r\ndata class ImageQuizUploadRequest(\r\n    val title: String,\r\n    val answer: String,\r\n    val category: String\r\n)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/soongsil/kidbean/front/quiz/image/dto/request/ImageQuizUploadRequest.kt b/app/src/main/java/soongsil/kidbean/front/quiz/image/dto/request/ImageQuizUploadRequest.kt
--- a/app/src/main/java/soongsil/kidbean/front/quiz/image/dto/request/ImageQuizUploadRequest.kt	(revision dfbf016eb3b618f988b70fbca19882a2fa100475)
+++ b/app/src/main/java/soongsil/kidbean/front/quiz/image/dto/request/ImageQuizUploadRequest.kt	(date 1712674788199)
@@ -3,5 +3,5 @@
 data class ImageQuizUploadRequest(
     val title: String,
     val answer: String,
-    val category: String
+    val quizCategory: String
 )
Index: app/src/main/java/soongsil/kidbean/front/quiz/image/ui/ImageQuizUploadActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package soongsil.kidbean.front.quiz.image.ui\r\n\r\nimport RetrofitImpl.retrofit\r\nimport android.Manifest\r\nimport android.R\r\nimport android.app.Activity\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.net.Uri\r\nimport android.os.Build\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.provider.MediaStore\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.widget.AdapterView\r\nimport android.widget.ArrayAdapter\r\nimport android.widget.ImageView\r\nimport android.widget.Toast\r\nimport androidx.activity.result.ActivityResultLauncher\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.appcompat.app.AlertDialog\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport com.bumptech.glide.Glide\r\nimport okhttp3.MediaType.Companion.toMediaType\r\nimport okhttp3.MediaType.Companion.toMediaTypeOrNull\r\nimport okhttp3.MultipartBody\r\nimport okhttp3.RequestBody\r\nimport okhttp3.RequestBody.Companion.asRequestBody\r\nimport okhttp3.RequestBody.Companion.toRequestBody\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\nimport soongsil.kidbean.front.MainActivity\r\nimport soongsil.kidbean.front.databinding.ActivityImageQuizUploadBinding\r\nimport soongsil.kidbean.front.quiz.image.presentation.ImageQuizController\r\nimport java.io.File\r\n\r\nclass ImageQuizUploadActivity : AppCompatActivity() {\r\n    private lateinit var binding: ActivityImageQuizUploadBinding\r\n\r\n    private val PERMISSION_REQUEST_CODE = 1\r\n    private var selectedImagePath: String? = null\r\n\r\n    private var category: String = \"ANIMAL\"\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        binding = ActivityImageQuizUploadBinding.inflate(layoutInflater)\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(binding.root)\r\n\r\n        binding.btnBack.setOnClickListener {\r\n            // 그림 문제 목록 화면으로 이동\r\n            val intent = Intent(this, MainActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        // 외부 저장소에 대한 런타임 퍼미션 요청\r\n        requestStoragePermission()\r\n\r\n        binding.imgQuiz.setOnClickListener {\r\n            openGallery()\r\n        }\r\n\r\n        // 카테고리 세팅\r\n        categorySetting()\r\n\r\n        //  등록 버튼 눌렀을 때 팝업 띄우기\r\n        binding.btnEnroll.setOnClickListener {\r\n            AlertDialog.Builder(this).apply {\r\n                setTitle(\"그림 문제 등록\")\r\n                setMessage(\"문제를 등록하시겠습니까?\")\r\n                setNegativeButton(\"취소\") { _, _ ->\r\n                    Toast.makeText(this@ImageQuizUploadActivity, \"등록을 취소하였습니다.\", Toast.LENGTH_SHORT)\r\n                        .show()\r\n                }\r\n                setPositiveButton(\"삭제\") { _, _ ->\r\n                    loadInfo()\r\n                }\r\n            }.create().show()\r\n\r\n            finish()\r\n        }\r\n\r\n        bottomSetting()\r\n    }\r\n\r\n    private fun bottomSetting() {\r\n        binding.btnHome.setOnClickListener {\r\n            val intent = Intent(this, MainActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        // 문제 풀기 화면으로 변경하기!\r\n        binding.btnQuiz.setOnClickListener {\r\n            /*val intent = Intent(this, ImageQuizShowActivity::class.java)\r\n            startActivity(intent)*/\r\n        }\r\n\r\n        // 프로그램 화면으로 변경하기!\r\n        binding.btnProgram.setOnClickListener {\r\n            /*val intent = Intent(this, MainActivity::class.java)\r\n            startActivity(intent)*/\r\n        }\r\n\r\n        // 마이페이지 화면으로 변경하기!\r\n        binding.btnProgram.setOnClickListener {\r\n            /*val intent = Intent(this, MypageActivity::class.java)\r\n            startActivity(intent)*/\r\n        }\r\n    }\r\n\r\n    private fun requestStoragePermission() {\r\n        if (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) !=\r\n            PackageManager.PERMISSION_GRANTED\r\n        ) {\r\n            requestPermissions(\r\n                arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE),\r\n                PERMISSION_REQUEST_CODE\r\n            )\r\n        }\r\n    }\r\n\r\n    companion object {\r\n        private const val REQUEST_IMAGE_PICK = 1\r\n    }\r\n\r\n    private fun openGallery() {\r\n        val intent = Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI)\r\n        Log.d(\"opengallery\", intent.toString())\r\n        startActivityForResult(intent, REQUEST_IMAGE_PICK)\r\n    }\r\n\r\n    @Deprecated(\"Deprecated in Java\")\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        Log.d(\"activity\", \"${requestCode}, ${resultCode}, ${data}\")\r\n        if (requestCode == REQUEST_IMAGE_PICK && resultCode == RESULT_OK && data != null) {\r\n            val imageUri = data.data\r\n            binding.imgQuiz.setImageURI(imageUri)\r\n            selectedImagePath = imageUri?.let { getImagePath(it) }\r\n            selectedImagePath?.let { Log.d(\"getpath\", it) }\r\n        }\r\n    }\r\n\r\n    private fun getImagePath(uri: Uri): String? {\r\n        val projection = arrayOf(MediaStore.Images.Media.DATA)\r\n        val cursor = contentResolver.query(uri, projection, null, null, null)\r\n        cursor?.use {\r\n            if (it.moveToFirst()) {\r\n                val columnIndex = it.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)\r\n                return it.getString(columnIndex)\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    fun loadInfo() {\r\n        val fileUpdate: MultipartBody.Part? = if (!selectedImagePath.isNullOrEmpty()) {\r\n            val imageFile = File(selectedImagePath)\r\n            val fileBody = imageFile.asRequestBody(\"image/*\".toMediaTypeOrNull())\r\n            MultipartBody.Part.createFormData(\"image\", imageFile.name, fileBody)\r\n        } else {\r\n            null\r\n        }\r\n\r\n        if (binding.tvCategory.equals(\"식물\")) {\r\n            category = \"PLANT\"\r\n        }\r\n\r\n        val quizData = \"\"\"\r\n        {\r\n            \"title\": ${binding.tvTitle.text},\r\n            \"answer\": ${binding.tvCorrect.text},\r\n            \"category\": ${category}\r\n        }\r\n        \"\"\".trimIndent().toRequestBody(\"application/json\".toMediaTypeOrNull())\r\n\r\n        val imageQuizController = retrofit.create(ImageQuizController::class.java)\r\n        if (fileUpdate != null) {\r\n            imageQuizController.uploadImageQuiz(1, fileUpdate, quizData).enqueue(object :\r\n                Callback<Void> {\r\n                override fun onResponse(\r\n                    call: Call<Void>,\r\n                    response: Response<Void>,\r\n                ) {\r\n                    if (response.isSuccessful) {\r\n                        // 정상적으로 통신이 성공된 경우\r\n                        Log.d(\"post\", \"onResponse 성공: \" + response.body().toString())\r\n                        Toast.makeText(this@ImageQuizUploadActivity, \"등록이 완료되었습니다.\", Toast.LENGTH_SHORT)\r\n                            .show()\r\n\r\n                    } else {\r\n                        // 통신이 실패한 경우(응답코드 3xx, 4xx 등)\r\n                        Log.d(\"post\", \"onResponse 실패 + ${response.code()}\")\r\n                    }\r\n\r\n                    finish()\r\n                }\r\n\r\n                override fun onFailure(call: Call<Void>, t: Throwable) {\r\n                    // 통신 실패 (인터넷 끊킴, 예외 발생 등 시스템적인 이유)\r\n                    Log.d(\"post\", \"onFailure 에러: \" + t.message.toString())\r\n                }\r\n            })\r\n        } else {\r\n            // 파일이 선택되지 않았을 때 처리할 로직 추가 가능\r\n            Toast.makeText(this@ImageQuizUploadActivity, \"이미지를 선택해주세요.\", Toast.LENGTH_SHORT).show()\r\n        }\r\n    }\r\n\r\n    override fun onRestart() {\r\n        super.onRestart()\r\n        loadInfo()\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        loadInfo()\r\n    }\r\n\r\n    private fun categorySetting() {\r\n        // 스피너에 표시될 데이터 생성\r\n        val categories: MutableList<String> = ArrayList()\r\n        categories.add(\"없음\")\r\n        categories.add(\"동물\")\r\n        categories.add(\"식물\")\r\n        categories.add(\"음식\")\r\n\r\n        // 어댑터 생성 및 데이터 설정\r\n        val adapter = ArrayAdapter(this, R.layout.simple_spinner_item, categories)\r\n        adapter.setDropDownViewResource(R.layout.simple_spinner_dropdown_item)\r\n\r\n        // 스피너에 어댑터 설정\r\n        val spinner = binding.tvCategory\r\n        spinner.adapter = adapter\r\n\r\n        // 스피너 아이템 선택 이벤트 처리\r\n        spinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {\r\n            override fun onItemSelected(\r\n                parent: AdapterView<*>,\r\n                view: View,\r\n                position: Int,\r\n                id: Long\r\n            ) {\r\n                // 선택된 아이템의 텍스트 가져오기\r\n                val selectedCategory = parent.getItemAtPosition(position).toString()\r\n                // 선택된 아이템에 대한 작업 수행 (예: 토스트 메시지 표시)\r\n                Toast.makeText(\r\n                    this@ImageQuizUploadActivity,\r\n                    \"선택된 카테고리: $selectedCategory\",\r\n                    Toast.LENGTH_SHORT\r\n                )\r\n                    .show()\r\n            }\r\n\r\n            override fun onNothingSelected(parent: AdapterView<*>?) {\r\n                // 아무것도 선택되지 않았을 때 처리할 작업 (필요에 따라 구현)\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/soongsil/kidbean/front/quiz/image/ui/ImageQuizUploadActivity.kt b/app/src/main/java/soongsil/kidbean/front/quiz/image/ui/ImageQuizUploadActivity.kt
--- a/app/src/main/java/soongsil/kidbean/front/quiz/image/ui/ImageQuizUploadActivity.kt	(revision dfbf016eb3b618f988b70fbca19882a2fa100475)
+++ b/app/src/main/java/soongsil/kidbean/front/quiz/image/ui/ImageQuizUploadActivity.kt	(date 1712675021805)
@@ -33,6 +33,7 @@
 import retrofit2.Callback
 import retrofit2.Response
 import soongsil.kidbean.front.MainActivity
+import soongsil.kidbean.front.base.ResponseTemplate
 import soongsil.kidbean.front.databinding.ActivityImageQuizUploadBinding
 import soongsil.kidbean.front.quiz.image.presentation.ImageQuizController
 import java.io.File
@@ -160,7 +161,7 @@
         val fileUpdate: MultipartBody.Part? = if (!selectedImagePath.isNullOrEmpty()) {
             val imageFile = File(selectedImagePath)
             val fileBody = imageFile.asRequestBody("image/*".toMediaTypeOrNull())
-            MultipartBody.Part.createFormData("image", imageFile.name, fileBody)
+            MultipartBody.Part.createFormData("s3Url", imageFile.name, fileBody)
         } else {
             null
         }
@@ -180,10 +181,10 @@
         val imageQuizController = retrofit.create(ImageQuizController::class.java)
         if (fileUpdate != null) {
             imageQuizController.uploadImageQuiz(1, fileUpdate, quizData).enqueue(object :
-                Callback<Void> {
+                Callback<ResponseTemplate<Void>> {
                 override fun onResponse(
-                    call: Call<Void>,
-                    response: Response<Void>,
+                    call: Call<ResponseTemplate<Void>>,
+                    response: Response<ResponseTemplate<Void>>,
                 ) {
                     if (response.isSuccessful) {
                         // 정상적으로 통신이 성공된 경우
@@ -199,7 +200,7 @@
                     finish()
                 }
 
-                override fun onFailure(call: Call<Void>, t: Throwable) {
+                override fun onFailure(call: Call<ResponseTemplate<Void>>, t: Throwable) {
                     // 통신 실패 (인터넷 끊킴, 예외 발생 등 시스템적인 이유)
                     Log.d("post", "onFailure 에러: " + t.message.toString())
                 }
Index: app/src/main/java/soongsil/kidbean/front/quiz/image/ui/ImageQuizShowActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package soongsil.kidbean.front.quiz.image.ui\r\n\r\nimport RetrofitImpl.retrofit\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.widget.ImageView\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AlertDialog\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport com.bumptech.glide.Glide\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\nimport soongsil.kidbean.front.MainActivity\r\nimport soongsil.kidbean.front.quiz.image.presentation.ImageQuizController\r\nimport soongsil.kidbean.front.quiz.image.dto.response.ImageQuizMemberDetailResponse\r\nimport soongsil.kidbean.front.databinding.ActivityImageQuizShowBinding\r\nimport soongsil.kidbean.front.quiz.MyQuizActivity\r\n\r\n\r\nclass ImageQuizShowActivity : AppCompatActivity() {\r\n    private lateinit var binding : ActivityImageQuizShowBinding\r\n    private lateinit var title : String\r\n    private lateinit var imgUrl : String\r\n    private lateinit var answer : String\r\n    private lateinit var category: String\r\n    private var quizId: Long = -1L\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        binding = ActivityImageQuizShowBinding.inflate(layoutInflater)\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(binding.root)\r\n\r\n        binding.btnBack.setOnClickListener {\r\n            // 그림 문제 목록 화면으로 이동\r\n            //val intent = Intent(this, ImageQuizListActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        quizId = intent.getLongExtra(\"quizId\", -1L)\r\n\r\n        loadInfo()\r\n\r\n        // 수정 버튼 눌렀을 때 수정 화면으로 이동\r\n        binding.btnEdit.setOnClickListener {\r\n            // 그림 문제 목록 화면으로 이동\r\n            val intent = Intent(this, ImageQuizUpdateActivity::class.java)\r\n            intent.putExtra(\"title\", title)\r\n            intent.putExtra(\"imgUrl\", imgUrl)\r\n            intent.putExtra(\"answer\", answer)\r\n            startActivity(intent)\r\n        }\r\n\r\n        // 삭제 버튼 눌렀을 때 팝업 띄우기\r\n        binding.btnDelete.setOnClickListener {\r\n            AlertDialog.Builder(this).apply {\r\n                setTitle(\"그림 문제 삭제\")\r\n                setMessage(\"문제를 삭제하시겠습니까?\")\r\n                setNegativeButton(\"취소\") { _, _ ->\r\n                    Toast.makeText(this@ImageQuizShowActivity, \"삭제를 취소하였습니다.\", Toast.LENGTH_SHORT).show()\r\n                }\r\n                setPositiveButton(\"삭제\") { _, _ ->\r\n                    postDelete()\r\n                    finish()\r\n\r\n                    val intent = Intent(this@ImageQuizShowActivity, MyQuizActivity::class.java)\r\n                    startActivity(intent)\r\n                }\r\n            }.create().show()\r\n        }\r\n\r\n        bottomSetting()\r\n    }\r\n\r\n    private fun bottomSetting() {\r\n        binding.btnHome.setOnClickListener {\r\n            val intent = Intent(this, MainActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        // 문제 풀기 화면으로 변경하기!\r\n        binding.btnQuiz.setOnClickListener {\r\n            /*val intent = Intent(this, ImageQuizShowActivity::class.java)\r\n            startActivity(intent)*/\r\n        }\r\n\r\n        // 프로그램 화면으로 변경하기!\r\n        binding.btnProgram.setOnClickListener {\r\n            /*val intent = Intent(this, MainActivity::class.java)\r\n            startActivity(intent)*/\r\n        }\r\n\r\n        // 마이페이지 화면으로 변경하기!\r\n        binding.btnProgram.setOnClickListener {\r\n            /*val intent = Intent(this, MypageActivity::class.java)\r\n            startActivity(intent)*/\r\n        }\r\n    }\r\n\r\n    private fun loadInfo() {\r\n        val imageQuizController = retrofit.create(ImageQuizController::class.java)\r\n        imageQuizController.getImageQuizById(1, quizId).enqueue(object :\r\n            Callback<ImageQuizMemberDetailResponse> {\r\n            override fun onResponse(\r\n                call: Call<ImageQuizMemberDetailResponse>,\r\n                response: Response<ImageQuizMemberDetailResponse>,\r\n            ) {\r\n                if (response.isSuccessful) {\r\n                    // 정상적으로 통신이 성공된 경우\r\n                    Log.d(\"post\", \"onResponse 성공: \" + response.body().toString())\r\n\r\n                    val body = response.body()\r\n\r\n                    // API로 가져온 제목 넣기\r\n                    title = body?.title.toString()\r\n                    binding.tvTitle.text = title\r\n\r\n                    // API로 가져온 이미지 넣기\r\n                    val imageView: ImageView = binding.imgQuiz\r\n                    imgUrl = body?.imgUrl.toString()\r\n\r\n                    Glide.with(this@ImageQuizShowActivity)\r\n                        .load(imgUrl)\r\n                        .into(imageView)\r\n                    imageView.visibility = View.VISIBLE\r\n\r\n                    // API로 가져온 카테고리 넣기\r\n                    category = body?.category.toString()\r\n                    if (category.equals(\"ANIMAL\")) {\r\n                        category = \"동물\"\r\n                    }\r\n                    else if (category.equals(\"PLANT\")) {\r\n                        category = \"식물\"\r\n                    }\r\n                    else if (category.equals(\"FOOD\")) {\r\n                        category = \"음식\"\r\n                    }\r\n                    binding.tvCategoryAnswer.text = category\r\n\r\n                    // API로 가져온 정답 넣기\r\n                    answer = body?.answer.toString()\r\n                    binding.tvCorrect.text = answer\r\n\r\n                } else {\r\n                    // 통신이 실패한 경우(응답코드 3xx, 4xx 등)\r\n                    Log.d(\"post\", \"onResponse 실패 + ${response.code()}\")\r\n                }\r\n            }\r\n\r\n            override fun onFailure(call: Call<ImageQuizMemberDetailResponse>, t: Throwable) {\r\n                // 통신 실패 (인터넷 끊킴, 예외 발생 등 시스템적인 이유)\r\n                Log.d(\"post\", \"onFailure 에러: \" + t.message.toString())\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun postDelete() {\r\n        val imageQuizController = retrofit.create(ImageQuizController::class.java)\r\n        imageQuizController.deleteImageQuiz(1, 7).enqueue(object :\r\n            Callback<Void> {\r\n            override fun onResponse(\r\n                call: Call<Void>,\r\n                response: Response<Void>,\r\n            ) {\r\n                if (response.isSuccessful) {\r\n                    // 정상적으로 통신이 성공된 경우\r\n                    Log.d(\"post\", \"onResponse 성공: \" + response.body().toString())\r\n                    Toast.makeText(this@ImageQuizShowActivity, \"삭제가 완료되었습니다.\", Toast.LENGTH_SHORT).show()\r\n                } else {\r\n                    // 통신이 실패한 경우(응답코드 3xx, 4xx 등)\r\n                    Log.d(\"post\", \"onResponse 실패 + ${response.code()}\")\r\n                }\r\n            }\r\n\r\n            override fun onFailure(call: Call<Void>, t: Throwable) {\r\n                // 통신 실패 (인터넷 끊킴, 예외 발생 등 시스템적인 이유)\r\n                Log.d(\"post\", \"onFailure 에러: \" + t.message.toString())\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun onRestart() {\r\n        super.onRestart()\r\n        loadInfo()\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        loadInfo()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/soongsil/kidbean/front/quiz/image/ui/ImageQuizShowActivity.kt b/app/src/main/java/soongsil/kidbean/front/quiz/image/ui/ImageQuizShowActivity.kt
--- a/app/src/main/java/soongsil/kidbean/front/quiz/image/ui/ImageQuizShowActivity.kt	(revision dfbf016eb3b618f988b70fbca19882a2fa100475)
+++ b/app/src/main/java/soongsil/kidbean/front/quiz/image/ui/ImageQuizShowActivity.kt	(date 1712672794900)
@@ -14,6 +14,7 @@
 import retrofit2.Callback
 import retrofit2.Response
 import soongsil.kidbean.front.MainActivity
+import soongsil.kidbean.front.base.ResponseTemplate
 import soongsil.kidbean.front.quiz.image.presentation.ImageQuizController
 import soongsil.kidbean.front.quiz.image.dto.response.ImageQuizMemberDetailResponse
 import soongsil.kidbean.front.databinding.ActivityImageQuizShowBinding
@@ -23,7 +24,7 @@
 class ImageQuizShowActivity : AppCompatActivity() {
     private lateinit var binding : ActivityImageQuizShowBinding
     private lateinit var title : String
-    private lateinit var imgUrl : String
+    private lateinit var s3Url : String
     private lateinit var answer : String
     private lateinit var category: String
     private var quizId: Long = -1L
@@ -39,7 +40,7 @@
             startActivity(intent)
         }
 
-        quizId = intent.getLongExtra("quizId", -1L)
+        quizId = intent.getLongExtra("quizId", 6)
 
         loadInfo()
 
@@ -48,7 +49,7 @@
             // 그림 문제 목록 화면으로 이동
             val intent = Intent(this, ImageQuizUpdateActivity::class.java)
             intent.putExtra("title", title)
-            intent.putExtra("imgUrl", imgUrl)
+            intent.putExtra("imgUrl", s3Url)
             intent.putExtra("answer", answer)
             startActivity(intent)
         }
@@ -102,16 +103,16 @@
     private fun loadInfo() {
         val imageQuizController = retrofit.create(ImageQuizController::class.java)
         imageQuizController.getImageQuizById(1, quizId).enqueue(object :
-            Callback<ImageQuizMemberDetailResponse> {
+            Callback<ResponseTemplate<ImageQuizMemberDetailResponse>> {
             override fun onResponse(
-                call: Call<ImageQuizMemberDetailResponse>,
-                response: Response<ImageQuizMemberDetailResponse>,
+                call: Call<ResponseTemplate<ImageQuizMemberDetailResponse>>,
+                response: Response<ResponseTemplate<ImageQuizMemberDetailResponse>>,
             ) {
                 if (response.isSuccessful) {
                     // 정상적으로 통신이 성공된 경우
                     Log.d("post", "onResponse 성공: " + response.body().toString())
 
-                    val body = response.body()
+                    val body = response.body()?.results
 
                     // API로 가져온 제목 넣기
                     title = body?.title.toString()
@@ -119,15 +120,15 @@
 
                     // API로 가져온 이미지 넣기
                     val imageView: ImageView = binding.imgQuiz
-                    imgUrl = body?.imgUrl.toString()
+                    s3Url = body?.s3Url.toString()
 
                     Glide.with(this@ImageQuizShowActivity)
-                        .load(imgUrl)
+                        .load(s3Url)
                         .into(imageView)
                     imageView.visibility = View.VISIBLE
 
                     // API로 가져온 카테고리 넣기
-                    category = body?.category.toString()
+                    category = body?.quizCategory.toString()
                     if (category.equals("ANIMAL")) {
                         category = "동물"
                     }
@@ -149,7 +150,7 @@
                 }
             }
 
-            override fun onFailure(call: Call<ImageQuizMemberDetailResponse>, t: Throwable) {
+            override fun onFailure(call: Call<ResponseTemplate<ImageQuizMemberDetailResponse>>, t: Throwable) {
                 // 통신 실패 (인터넷 끊킴, 예외 발생 등 시스템적인 이유)
                 Log.d("post", "onFailure 에러: " + t.message.toString())
             }
@@ -158,11 +159,11 @@
 
     private fun postDelete() {
         val imageQuizController = retrofit.create(ImageQuizController::class.java)
-        imageQuizController.deleteImageQuiz(1, 7).enqueue(object :
-            Callback<Void> {
+        imageQuizController.deleteImageQuiz(1, quizId).enqueue(object :
+            Callback<ResponseTemplate<Void>> {
             override fun onResponse(
-                call: Call<Void>,
-                response: Response<Void>,
+                call: Call<ResponseTemplate<Void>>,
+                response: Response<ResponseTemplate<Void>>,
             ) {
                 if (response.isSuccessful) {
                     // 정상적으로 통신이 성공된 경우
@@ -174,7 +175,7 @@
                 }
             }
 
-            override fun onFailure(call: Call<Void>, t: Throwable) {
+            override fun onFailure(call: Call<ResponseTemplate<Void>>, t: Throwable) {
                 // 통신 실패 (인터넷 끊킴, 예외 발생 등 시스템적인 이유)
                 Log.d("post", "onFailure 에러: " + t.message.toString())
             }
Index: app/src/main/java/soongsil/kidbean/front/quiz/image/dto/request/ImageQuizUpdateRequest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package soongsil.kidbean.front.quiz.image.dto.request\r\n\r\nimport com.google.gson.annotations.SerializedName\r\n\r\ndata class ImageQuizUpdateRequest(\r\n    val title: String,\r\n    val answer: String,\r\n    val category: String\r\n) {\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/soongsil/kidbean/front/quiz/image/dto/request/ImageQuizUpdateRequest.kt b/app/src/main/java/soongsil/kidbean/front/quiz/image/dto/request/ImageQuizUpdateRequest.kt
--- a/app/src/main/java/soongsil/kidbean/front/quiz/image/dto/request/ImageQuizUpdateRequest.kt	(revision dfbf016eb3b618f988b70fbca19882a2fa100475)
+++ b/app/src/main/java/soongsil/kidbean/front/quiz/image/dto/request/ImageQuizUpdateRequest.kt	(date 1712674770475)
@@ -5,6 +5,6 @@
 data class ImageQuizUpdateRequest(
     val title: String,
     val answer: String,
-    val category: String
+    val quizCategory: String
 ) {
 }
\ No newline at end of file
Index: app/src/main/java/soongsil/kidbean/front/quiz/image/ui/ImageQuizUpdateActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package soongsil.kidbean.front.quiz.image.ui\r\n\r\nimport RetrofitImpl.retrofit\r\nimport android.app.Activity\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.icu.text.CaseMap.Title\r\nimport android.net.Uri\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.provider.MediaStore\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.widget.AdapterView\r\nimport android.widget.ArrayAdapter\r\nimport android.widget.ImageView\r\nimport android.widget.Toast\r\nimport androidx.activity.result.ActivityResultLauncher\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.appcompat.app.AlertDialog\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport com.bumptech.glide.Glide\r\nimport okhttp3.MediaType.Companion.toMediaType\r\nimport okhttp3.MediaType.Companion.toMediaTypeOrNull\r\nimport okhttp3.MultipartBody\r\nimport okhttp3.RequestBody\r\nimport okhttp3.RequestBody.Companion.asRequestBody\r\nimport okhttp3.RequestBody.Companion.toRequestBody\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\nimport soongsil.kidbean.front.MainActivity\r\nimport soongsil.kidbean.front.databinding.ActivityImageQuizUpdateBinding\r\nimport soongsil.kidbean.front.quiz.image.dto.request.ImageQuizUpdateRequest\r\nimport soongsil.kidbean.front.quiz.image.presentation.ImageQuizController\r\nimport java.io.File\r\n\r\nclass ImageQuizUpdateActivity : AppCompatActivity() {\r\n    private lateinit var binding: ActivityImageQuizUpdateBinding\r\n    private lateinit var title: String\r\n    private lateinit var answer: String\r\n\r\n    private val PERMISSION_REQUEST_CODE = 1\r\n    private var selectedImagePath: String? = null\r\n\r\n    private var category: String = \"ANIMAL\"\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        binding = ActivityImageQuizUpdateBinding.inflate(layoutInflater)\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(binding.root)\r\n\r\n        binding.btnBack.setOnClickListener {\r\n            // 그림 문제 목록 화면으로 이동\r\n            val intent = Intent(this, ImageQuizShowActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        title = intent.getStringExtra(\"title\").toString()\r\n        answer = intent.getStringExtra(\"answer\").toString()\r\n\r\n        binding.tvTitle.setText(title)\r\n        binding.tvCorrect.setText(answer)\r\n\r\n        val imageView: ImageView = binding.imgQuiz\r\n        Glide.with(this@ImageQuizUpdateActivity)\r\n            .load(intent.getStringExtra(\"imgUrl\"))\r\n            .into(imageView)\r\n        imageView.visibility = View.VISIBLE\r\n\r\n        binding.imgQuiz.setOnClickListener {\r\n            //갤러리 호출\r\n            requestStoragePermission()\r\n\r\n            openGallery()\r\n        }\r\n\r\n        // 카테고리 세팅\r\n        categorySetting()\r\n\r\n        //  등록 버튼 눌렀을 때 팝업 띄우기\r\n        binding.btnEnroll.setOnClickListener {\r\n            AlertDialog.Builder(this).apply {\r\n                setTitle(\"그림 문제 수정\")\r\n                setMessage(\"문제를 수정하시겠습니까?\")\r\n                setNegativeButton(\"취소\") { _, _ ->\r\n                    Toast.makeText(this@ImageQuizUpdateActivity, \"수정을 취소하였습니다.\", Toast.LENGTH_SHORT)\r\n                        .show()\r\n                }\r\n                setPositiveButton(\"수정\") { _, _ ->\r\n                    loadInfo()\r\n                    finish()\r\n                }\r\n            }.create().show()\r\n        }\r\n\r\n        bottomSetting()\r\n    }\r\n\r\n    private fun bottomSetting() {\r\n        binding.btnHome.setOnClickListener {\r\n            val intent = Intent(this, MainActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        // 문제 풀기 화면으로 변경하기!\r\n        binding.btnQuiz.setOnClickListener {\r\n            /*val intent = Intent(this, ImageQuizShowActivity::class.java)\r\n            startActivity(intent)*/\r\n        }\r\n\r\n        // 프로그램 화면으로 변경하기!\r\n        binding.btnProgram.setOnClickListener {\r\n            /*val intent = Intent(this, MainActivity::class.java)\r\n            startActivity(intent)*/\r\n        }\r\n\r\n        // 마이페이지 화면으로 변경하기!\r\n        binding.btnProgram.setOnClickListener {\r\n            /*val intent = Intent(this, MypageActivity::class.java)\r\n            startActivity(intent)*/\r\n        }\r\n    }\r\n\r\n    private fun openGallery() {\r\n        //갤러리 호출\r\n        val intent = Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI)\r\n        startActivityForResult(intent, ImageQuizUpdateActivity.REQUEST_IMAGE_PICK)\r\n    }\r\n\r\n    private fun requestStoragePermission() {\r\n        if (checkSelfPermission(android.Manifest.permission.WRITE_EXTERNAL_STORAGE) !=\r\n            PackageManager.PERMISSION_GRANTED\r\n        ) {\r\n            requestPermissions(\r\n                arrayOf(android.Manifest.permission.WRITE_EXTERNAL_STORAGE),\r\n                PERMISSION_REQUEST_CODE\r\n            )\r\n        }\r\n    }\r\n\r\n    companion object {\r\n        private const val REQUEST_IMAGE_PICK = 1\r\n    }\r\n\r\n    //결과 가져오기\r\n    private val activityResult: ActivityResultLauncher<Intent> = registerForActivityResult(\r\n        ActivityResultContracts.StartActivityForResult()){\r\n\r\n        //결과 코드 OK , 결가값 null 아니면\r\n        if(it.resultCode == RESULT_OK && it.data != null){\r\n            //값 담기\r\n            val uri  = it.data!!.data\r\n\r\n            //화면에 보여주기\r\n            Glide.with(this)\r\n                .load(uri) //이미지\r\n                .into(binding.imgQuiz) //보여줄 위치\r\n        }\r\n    }\r\n\r\n    //결과 가져오기\r\n    @Deprecated(\"Deprecated in Java\")\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        if (requestCode == ImageQuizUpdateActivity.REQUEST_IMAGE_PICK && resultCode == Activity.RESULT_OK && data != null) {\r\n            val imageUri = data.data\r\n            binding.imgQuiz.setImageURI(imageUri)\r\n            selectedImagePath = imageUri?.let { getImagePath(it) }\r\n            selectedImagePath?.let { Log.d(\"path\", it) }\r\n        }\r\n    }\r\n\r\n    private fun getImagePath(uri: Uri): String? {\r\n        val projection = arrayOf(MediaStore.Images.Media.DATA)\r\n        val cursor = contentResolver.query(uri, projection, null, null, null)\r\n        cursor?.use {\r\n            if (it.moveToFirst()) {\r\n                val columnIndex = it.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)\r\n                return it.getString(columnIndex)\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    fun loadInfo() {\r\n        val fileUpdate: MultipartBody.Part? = if (!selectedImagePath.isNullOrEmpty()) {\r\n            val imageFile = File(selectedImagePath)\r\n            val fileBody = imageFile.asRequestBody(\"image/*\".toMediaTypeOrNull())\r\n            MultipartBody.Part.createFormData(\"image\", imageFile.name, fileBody)\r\n        } else {\r\n            // 이미지가 변경되지 않은 경우 공백(\"\")을 넘겨주기 위한 코드\r\n            val emptyRequestBody = \"\".toRequestBody(\"text/plain\".toMediaTypeOrNull())\r\n            MultipartBody.Part.createFormData(\"image\", \"\", emptyRequestBody)\r\n        }\r\n\r\n        if (binding.tvCategory.equals(\"식물\")) {\r\n            category = \"PLANT\"\r\n        }\r\n\r\n        val quizData = \"\"\"\r\n        {\r\n            \"title\": ${binding.tvTitle.text},\r\n            \"answer\": ${binding.tvCorrect.text},\r\n            \"category\": $category\r\n        }\r\n        \"\"\".trimIndent().toRequestBody(\"application/json\".toMediaTypeOrNull())\r\n\r\n        val imageQuizController = retrofit.create(ImageQuizController::class.java)\r\n        if (fileUpdate != null) {\r\n            imageQuizController.updateImageQuiz(1, 8, fileUpdate, quizData).enqueue(object :\r\n                Callback<Void> {\r\n                override fun onResponse(\r\n                    call: Call<Void>,\r\n                    response: Response<Void>,\r\n                ) {\r\n                    if (response.isSuccessful) {\r\n                        // 정상적으로 통신이 성공된 경우\r\n                        Log.d(\"post\", \"onResponse 성공: \" + response.body().toString())\r\n\r\n                        Toast.makeText(this@ImageQuizUpdateActivity, \"수정이 완료되었습니다.\", Toast.LENGTH_SHORT)\r\n                            .show()\r\n                    } else {\r\n                        // 통신이 실패한 경우(응답코드 3xx, 4xx 등)\r\n                        Log.d(\"post\", \"onResponse 실패 + ${response.code()} + ${quizData}\")\r\n                        Toast.makeText(this@ImageQuizUpdateActivity, \"수정이 실패하였습니다.\", Toast.LENGTH_SHORT)\r\n                            .show()\r\n                    }\r\n\r\n                    finish()\r\n                }\r\n\r\n                override fun onFailure(call: Call<Void>, t: Throwable) {\r\n                    // 통신 실패 (인터넷 끊킴, 예외 발생 등 시스템적인 이유)\r\n                    Log.d(\"post\", \"onFailure 에러: \" + t.message.toString())\r\n                }\r\n            })\r\n        } else {\r\n            // 파일이 선택되지 않았을 때 처리할 로직 추가 가능\r\n            Toast.makeText(this@ImageQuizUpdateActivity, \"이미지를 선택해주세요.\", Toast.LENGTH_SHORT).show()\r\n        }\r\n    }\r\n\r\n    override fun onRestart() {\r\n        super.onRestart()\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n    }\r\n\r\n    private fun categorySetting() {\r\n        // 스피너에 표시될 데이터 생성\r\n        val categories: MutableList<String> = ArrayList()\r\n        categories.add(\"없음\")\r\n        categories.add(\"동물\")\r\n        categories.add(\"식물\")\r\n        categories.add(\"음식\")\r\n\r\n        // 어댑터 생성 및 데이터 설정\r\n        val adapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, categories)\r\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)\r\n\r\n        // 스피너에 어댑터 설정\r\n        val spinner = binding.tvCategory\r\n        spinner.adapter = adapter\r\n\r\n        // 스피너 아이템 선택 이벤트 처리\r\n        spinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {\r\n            override fun onItemSelected(\r\n                parent: AdapterView<*>,\r\n                view: View,\r\n                position: Int,\r\n                id: Long\r\n            ) {\r\n                // 선택된 아이템의 텍스트 가져오기\r\n                val selectedCategory = parent.getItemAtPosition(position).toString()\r\n                // 선택된 아이템에 대한 작업 수행 (예: 토스트 메시지 표시)\r\n                Toast.makeText(\r\n                    this@ImageQuizUpdateActivity,\r\n                    \"선택된 카테고리: $selectedCategory\",\r\n                    Toast.LENGTH_SHORT\r\n                )\r\n                    .show()\r\n            }\r\n\r\n            override fun onNothingSelected(parent: AdapterView<*>?) {\r\n                // 아무것도 선택되지 않았을 때 처리할 작업 (필요에 따라 구현)\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/soongsil/kidbean/front/quiz/image/ui/ImageQuizUpdateActivity.kt b/app/src/main/java/soongsil/kidbean/front/quiz/image/ui/ImageQuizUpdateActivity.kt
--- a/app/src/main/java/soongsil/kidbean/front/quiz/image/ui/ImageQuizUpdateActivity.kt	(revision dfbf016eb3b618f988b70fbca19882a2fa100475)
+++ b/app/src/main/java/soongsil/kidbean/front/quiz/image/ui/ImageQuizUpdateActivity.kt	(date 1712675175085)
@@ -31,6 +31,7 @@
 import retrofit2.Callback
 import retrofit2.Response
 import soongsil.kidbean.front.MainActivity
+import soongsil.kidbean.front.base.ResponseTemplate
 import soongsil.kidbean.front.databinding.ActivityImageQuizUpdateBinding
 import soongsil.kidbean.front.quiz.image.dto.request.ImageQuizUpdateRequest
 import soongsil.kidbean.front.quiz.image.presentation.ImageQuizController
@@ -209,11 +210,11 @@
 
         val imageQuizController = retrofit.create(ImageQuizController::class.java)
         if (fileUpdate != null) {
-            imageQuizController.updateImageQuiz(1, 8, fileUpdate, quizData).enqueue(object :
-                Callback<Void> {
+            imageQuizController.updateImageQuiz(1, 6, fileUpdate, quizData).enqueue(object :
+                Callback<ResponseTemplate<Void>> {
                 override fun onResponse(
-                    call: Call<Void>,
-                    response: Response<Void>,
+                    call: Call<ResponseTemplate<Void>>,
+                    response: Response<ResponseTemplate<Void>>,
                 ) {
                     if (response.isSuccessful) {
                         // 정상적으로 통신이 성공된 경우
@@ -231,7 +232,7 @@
                     finish()
                 }
 
-                override fun onFailure(call: Call<Void>, t: Throwable) {
+                override fun onFailure(call: Call<ResponseTemplate<Void>>, t: Throwable) {
                     // 통신 실패 (인터넷 끊킴, 예외 발생 등 시스템적인 이유)
                     Log.d("post", "onFailure 에러: " + t.message.toString())
                 }
Index: app/src/main/java/soongsil/kidbean/front/quiz/image/dto/response/ImageQuizMemberDetailResponse.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package soongsil.kidbean.front.quiz.image.dto.response\r\n\r\nimport com.google.gson.annotations.SerializedName\r\n\r\ndata class ImageQuizMemberDetailResponse(\r\n    val title: String,\r\n    @SerializedName(value = \"imageUrl\")\r\n    val imgUrl: String,\r\n    val answer: String,\r\n    val category: String\r\n) {\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/soongsil/kidbean/front/quiz/image/dto/response/ImageQuizMemberDetailResponse.kt b/app/src/main/java/soongsil/kidbean/front/quiz/image/dto/response/ImageQuizMemberDetailResponse.kt
--- a/app/src/main/java/soongsil/kidbean/front/quiz/image/dto/response/ImageQuizMemberDetailResponse.kt	(revision dfbf016eb3b618f988b70fbca19882a2fa100475)
+++ b/app/src/main/java/soongsil/kidbean/front/quiz/image/dto/response/ImageQuizMemberDetailResponse.kt	(date 1712672795005)
@@ -4,9 +4,9 @@
 
 data class ImageQuizMemberDetailResponse(
     val title: String,
-    @SerializedName(value = "imageUrl")
-    val imgUrl: String,
+    @SerializedName(value = "s3Url")
+    val s3Url: String,
     val answer: String,
-    val category: String
+    val quizCategory: String
 ) {
 }
\ No newline at end of file
Index: app/src/main/java/soongsil/kidbean/front/quiz/image/presentation/ImageQuizController.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package soongsil.kidbean.front.quiz.image.presentation\r\n\r\nimport okhttp3.MultipartBody\r\nimport okhttp3.RequestBody\r\nimport retrofit2.Call\r\nimport retrofit2.http.DELETE\r\nimport retrofit2.http.GET\r\nimport retrofit2.http.Multipart\r\nimport retrofit2.http.PATCH\r\nimport retrofit2.http.POST\r\nimport retrofit2.http.PUT\r\nimport retrofit2.http.Part\r\nimport retrofit2.http.Path\r\nimport soongsil.kidbean.front.quiz.image.dto.response.ImageQuizMemberDetailResponse\r\nimport soongsil.kidbean.front.quiz.image.dto.response.ImageQuizMemberResponse\r\n\r\ninterface ImageQuizController {\r\n\r\n    @GET(\"quiz/image/member/{memberId}/{quizId}\")\r\n    fun getImageQuizById(\r\n        @Path(\"memberId\") memberId: Long,\r\n        @Path(\"quizId\") quizId: Long\r\n        ): Call<ImageQuizMemberDetailResponse>\r\n\r\n    @GET(\"quiz/image/member/{memberId}\")\r\n    fun getAllImageQuizByMember(\r\n        @Path(\"memberId\") memberId: Long\r\n    ): Call<List<ImageQuizMemberResponse>>\r\n\r\n    @Multipart\r\n    @PUT(\"quiz/image/member/{memberId}/{quizId}\")\r\n    fun updateImageQuiz(\r\n        @Path(\"memberId\") memberId: Long,\r\n        @Path(\"quizId\") quizId: Long,\r\n        @Part image: MultipartBody.Part,\r\n        @Part(\"imageQuizUpdateRequest\") request: RequestBody\r\n    ): Call<Void>\r\n\r\n    @Multipart\r\n    @POST(\"quiz/image/member/{memberId}\")\r\n    fun uploadImageQuiz(\r\n        @Path(\"memberId\") memberId: Long,\r\n        @Part image: MultipartBody.Part,\r\n        @Part(\"imageQuizUploadRequest\") request: RequestBody\r\n    ): Call<Void>\r\n\r\n    @DELETE(\"quiz/image/member/{memberId}/{quizId}\")\r\n    fun deleteImageQuiz(\r\n        @Path(\"memberId\") memberId: Long,\r\n        @Path(\"quizId\") quizId: Long\r\n    ) :Call<Void>\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/soongsil/kidbean/front/quiz/image/presentation/ImageQuizController.kt b/app/src/main/java/soongsil/kidbean/front/quiz/image/presentation/ImageQuizController.kt
--- a/app/src/main/java/soongsil/kidbean/front/quiz/image/presentation/ImageQuizController.kt	(revision dfbf016eb3b618f988b70fbca19882a2fa100475)
+++ b/app/src/main/java/soongsil/kidbean/front/quiz/image/presentation/ImageQuizController.kt	(date 1712674970232)
@@ -6,11 +6,11 @@
 import retrofit2.http.DELETE
 import retrofit2.http.GET
 import retrofit2.http.Multipart
-import retrofit2.http.PATCH
 import retrofit2.http.POST
 import retrofit2.http.PUT
 import retrofit2.http.Part
 import retrofit2.http.Path
+import soongsil.kidbean.front.base.ResponseTemplate
 import soongsil.kidbean.front.quiz.image.dto.response.ImageQuizMemberDetailResponse
 import soongsil.kidbean.front.quiz.image.dto.response.ImageQuizMemberResponse
 
@@ -20,33 +20,33 @@
     fun getImageQuizById(
         @Path("memberId") memberId: Long,
         @Path("quizId") quizId: Long
-        ): Call<ImageQuizMemberDetailResponse>
+        ): Call<ResponseTemplate<ImageQuizMemberDetailResponse>>
 
     @GET("quiz/image/member/{memberId}")
     fun getAllImageQuizByMember(
         @Path("memberId") memberId: Long
-    ): Call<List<ImageQuizMemberResponse>>
+    ): Call<ResponseTemplate<List<ImageQuizMemberResponse>>>
 
     @Multipart
     @PUT("quiz/image/member/{memberId}/{quizId}")
     fun updateImageQuiz(
         @Path("memberId") memberId: Long,
         @Path("quizId") quizId: Long,
-        @Part image: MultipartBody.Part,
+        @Part s3Url: MultipartBody.Part,
         @Part("imageQuizUpdateRequest") request: RequestBody
-    ): Call<Void>
+    ): Call<ResponseTemplate<Void>>
 
     @Multipart
     @POST("quiz/image/member/{memberId}")
     fun uploadImageQuiz(
         @Path("memberId") memberId: Long,
-        @Part image: MultipartBody.Part,
+        @Part s3Url: MultipartBody.Part,
         @Part("imageQuizUploadRequest") request: RequestBody
-    ): Call<Void>
+    ): Call<ResponseTemplate<Void>>
 
     @DELETE("quiz/image/member/{memberId}/{quizId}")
     fun deleteImageQuiz(
         @Path("memberId") memberId: Long,
         @Path("quizId") quizId: Long
-    ) :Call<Void>
+    ) :Call<ResponseTemplate<Void>>
 }
\ No newline at end of file
Index: app/src/main/java/soongsil/kidbean/front/quiz/image/ui/ImageQuizListActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package soongsil.kidbean.front.quiz.image.ui\r\n\r\nimport RetrofitImpl.retrofit\r\nimport android.content.Intent\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.provider.ContactsContract.CommonDataKinds.Im\r\nimport android.util.Log\r\nimport android.view.View\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\nimport soongsil.kidbean.front.MainActivity\r\nimport soongsil.kidbean.front.databinding.ActivityImageQuizListBinding\r\nimport soongsil.kidbean.front.quiz.image.dto.response.ImageQuizMemberResponse\r\nimport soongsil.kidbean.front.quiz.image.presentation.ImageQuizController\r\n\r\nclass ImageQuizListActivity : AppCompatActivity() {\r\n    private lateinit var binding : ActivityImageQuizListBinding\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        binding = ActivityImageQuizListBinding.inflate(layoutInflater)\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(binding.root)\r\n\r\n        binding.btnBack.setOnClickListener {\r\n            // 홈 화면으로 이동\r\n            val intent = Intent(this, MainActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        binding.btnEnroll.setOnClickListener {\r\n            // 그림 문제 등록 화면으로 이동\r\n            val intent = Intent(this, ImageQuizUploadActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        loadQuizList()\r\n\r\n        bottomSetting()\r\n    }\r\n\r\n    private fun setAdapter(quizList: List<ImageQuizMemberResponse>) {\r\n        val listAdapter = ImageQuizAdapter(quizList)\r\n        val linearLayoutManager = LinearLayoutManager(this)\r\n\r\n        binding.rvQuiz.adapter = listAdapter\r\n        binding.rvQuiz.layoutManager = linearLayoutManager\r\n        binding.rvQuiz.setHasFixedSize(true)\r\n    }\r\n\r\n    private fun bottomSetting() {\r\n        binding.btnHome.setOnClickListener {\r\n            val intent = Intent(this, MainActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        // 문제 풀기 화면으로 변경하기!\r\n        binding.btnQuiz.setOnClickListener {\r\n            /*val intent = Intent(this, ImageQuizShowActivity::class.java)\r\n            startActivity(intent)*/\r\n        }\r\n\r\n        // 프로그램 화면으로 변경하기!\r\n        binding.btnProgram.setOnClickListener {\r\n            /*val intent = Intent(this, MainActivity::class.java)\r\n            startActivity(intent)*/\r\n        }\r\n\r\n        // 마이페이지 화면으로 변경하기!\r\n        binding.btnProgram.setOnClickListener {\r\n            /*val intent = Intent(this, MypageActivity::class.java)\r\n            startActivity(intent)*/\r\n        }\r\n    }\r\n\r\n    private fun loadQuizList() {\r\n        val imageQuizController = retrofit.create(ImageQuizController::class.java)\r\n        imageQuizController.getAllImageQuizByMember(1).enqueue(object :\r\n            Callback<List<ImageQuizMemberResponse>> {\r\n            override fun onResponse(\r\n                call: Call<List<ImageQuizMemberResponse>>,\r\n                response: Response<List<ImageQuizMemberResponse>>,\r\n            ) {\r\n                if (response.isSuccessful) {\r\n                    // 정상적으로 통신이 성공된 경우\r\n                    Log.d(\"post\", \"onResponse 성공: \" + response.body().toString())\r\n\r\n                    val body = response.body()\r\n\r\n                    if (body!!.isNotEmpty()) {\r\n                        setAdapter(body)\r\n                    }\r\n                } else {\r\n                    // 통신이 실패한 경우(응답코드 3xx, 4xx 등)\r\n                    Log.d(\"post\", \"onResponse 실패 + ${response.code()}\")\r\n                }\r\n            }\r\n\r\n            override fun onFailure(call: Call<List<ImageQuizMemberResponse>>, t: Throwable) {\r\n                // 통신 실패 (인터넷 끊킴, 예외 발생 등 시스템적인 이유)\r\n                Log.d(\"post\", \"onFailure 에러: \" + t.message.toString())\r\n            }\r\n        })\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/soongsil/kidbean/front/quiz/image/ui/ImageQuizListActivity.kt b/app/src/main/java/soongsil/kidbean/front/quiz/image/ui/ImageQuizListActivity.kt
--- a/app/src/main/java/soongsil/kidbean/front/quiz/image/ui/ImageQuizListActivity.kt	(revision dfbf016eb3b618f988b70fbca19882a2fa100475)
+++ b/app/src/main/java/soongsil/kidbean/front/quiz/image/ui/ImageQuizListActivity.kt	(date 1712674372946)
@@ -12,6 +12,7 @@
 import retrofit2.Callback
 import retrofit2.Response
 import soongsil.kidbean.front.MainActivity
+import soongsil.kidbean.front.base.ResponseTemplate
 import soongsil.kidbean.front.databinding.ActivityImageQuizListBinding
 import soongsil.kidbean.front.quiz.image.dto.response.ImageQuizMemberResponse
 import soongsil.kidbean.front.quiz.image.presentation.ImageQuizController
@@ -78,16 +79,16 @@
     private fun loadQuizList() {
         val imageQuizController = retrofit.create(ImageQuizController::class.java)
         imageQuizController.getAllImageQuizByMember(1).enqueue(object :
-            Callback<List<ImageQuizMemberResponse>> {
+            Callback<ResponseTemplate<List<ImageQuizMemberResponse>>> {
             override fun onResponse(
-                call: Call<List<ImageQuizMemberResponse>>,
-                response: Response<List<ImageQuizMemberResponse>>,
+                call: Call<ResponseTemplate<List<ImageQuizMemberResponse>>>,
+                response: Response<ResponseTemplate<List<ImageQuizMemberResponse>>>,
             ) {
                 if (response.isSuccessful) {
                     // 정상적으로 통신이 성공된 경우
                     Log.d("post", "onResponse 성공: " + response.body().toString())
 
-                    val body = response.body()
+                    val body = response.body()?.results
 
                     if (body!!.isNotEmpty()) {
                         setAdapter(body)
@@ -98,7 +99,7 @@
                 }
             }
 
-            override fun onFailure(call: Call<List<ImageQuizMemberResponse>>, t: Throwable) {
+            override fun onFailure(call: Call<ResponseTemplate<List<ImageQuizMemberResponse>>>, t: Throwable) {
                 // 통신 실패 (인터넷 끊킴, 예외 발생 등 시스템적인 이유)
                 Log.d("post", "onFailure 에러: " + t.message.toString())
             }
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n        xmlns:tools=\"http://schemas.android.com/tools\">\r\n\r\n    <queries>\r\n        <intent>\r\n            <action android:name=\"android.media.action.IMAGE_CAPTURE\" />\r\n        </intent>\r\n    </queries>\r\n\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.CAMERA\" />\r\n    <uses-permission\r\n            android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"\r\n            android:maxSdkVersion=\"32\"\r\n            tools:ignore=\"ScopedStorage\" />\r\n    <uses-permission\r\n            android:name=\"android.permission.READ_EXTERNAL_STORAGE\"\r\n            android:maxSdkVersion=\"32\" />\r\n\r\n    <uses-feature\r\n            android:name=\"android.hardware.camera\"\r\n            android:required=\"true\" />\r\n\r\n    <application\r\n            android:allowBackup=\"true\"\r\n            android:dataExtractionRules=\"@xml/data_extraction_rules\"\r\n            android:enableOnBackInvokedCallback=\"true\"\r\n            android:fullBackupContent=\"@xml/backup_rules\"\r\n            android:icon=\"@drawable/kidbean\"\r\n            android:label=\"Kid@Bean\"\r\n            android:requestLegacyExternalStorage=\"true\"\r\n            android:roundIcon=\"@drawable/kidbean\"\r\n            android:supportsRtl=\"true\"\r\n            android:theme=\"@style/Theme.Front\"\r\n            android:usesCleartextTraffic=\"true\"\r\n            tools:replace=\"android:usesCleartextTraffic\"\r\n            tools:targetApi=\"33\">\r\n        <activity\r\n                android:name=\".quiz.answer.ui.AnswerQuizShowActivity\"\r\n                android:exported=\"false\" />\r\n        <activity\r\n                android:name=\".quiz.MyQuizActivity\"\r\n                android:exported=\"false\" />\r\n        <activity\r\n                android:name=\".quiz.image.ui.ImageQuizListActivity\"\r\n                android:exported=\"true\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n        <activity\r\n                android:name=\".quiz.image.ui.ImageQuizUploadActivity\"\r\n                android:exported=\"false\" />\r\n        <activity\r\n                android:name=\".quiz.image.ui.ImageQuizUpdateActivity\"\r\n                android:exported=\"false\" />\r\n        <activity\r\n                android:name=\".quiz.image.ui.ImageQuizShowActivity\"\r\n                android:exported=\"false\" />\r\n        <activity\r\n                android:name=\".MainActivity\"\r\n                android:exported=\"true\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
--- a/app/src/main/AndroidManifest.xml	(revision dfbf016eb3b618f988b70fbca19882a2fa100475)
+++ b/app/src/main/AndroidManifest.xml	(date 1712674372898)
@@ -60,7 +60,8 @@
                 android:exported="false" />
         <activity
                 android:name=".quiz.image.ui.ImageQuizShowActivity"
-                android:exported="false" />
+                android:exported="false">
+        </activity>
         <activity
                 android:name=".MainActivity"
                 android:exported="true">
Index: app/src/main/java/soongsil/kidbean/front/quiz/answer/ui/AnswerQuizShowActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package soongsil.kidbean.front.quiz.answer.ui\r\n\r\nclass AnswerQuizShowActivity {\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/soongsil/kidbean/front/quiz/answer/ui/AnswerQuizShowActivity.kt b/app/src/main/java/soongsil/kidbean/front/quiz/answer/ui/AnswerQuizShowActivity.kt
--- a/app/src/main/java/soongsil/kidbean/front/quiz/answer/ui/AnswerQuizShowActivity.kt	(revision dfbf016eb3b618f988b70fbca19882a2fa100475)
+++ b/app/src/main/java/soongsil/kidbean/front/quiz/answer/ui/AnswerQuizShowActivity.kt	(date 1712646975848)
@@ -1,4 +1,15 @@
 package soongsil.kidbean.front.quiz.answer.ui
 
-class AnswerQuizShowActivity {
+import androidx.appcompat.app.AppCompatActivity
+import android.os.Bundle
+import soongsil.kidbean.front.R
+import soongsil.kidbean.front.databinding.ActivityAnswerQuizShowBinding
+
+class AnswerQuizShowActivity : AppCompatActivity() {
+    private lateinit var binding : ActivityAnswerQuizShowBinding
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        setContentView(R.layout.activity_answer_quiz_show)
+    }
 }
\ No newline at end of file
